--- a/arch/mips/bcm63xx/boards/board_common.c
+++ b/arch/mips/bcm63xx/boards/board_common.c
@@ -30,6 +30,7 @@
 #include <bcm63xx_dev_usb_ehci.h>
 #include <bcm63xx_dev_usb_ohci.h>
 #include <bcm63xx_dev_usb_usbd.h>
+#include <bcm63xx_dev_wlan.h>
 #include <board_bcm963xx.h>
 #include <pci_ath9k_fixup.h>
 #include <pci_rt2x00_fixup.h>
@@ -245,6 +246,8 @@ int __init board_register_devices(void)
 	     bcm63xx_register_fallback_sprom(&board.fallback_sprom)))
 		pr_err(PFX "failed to register fallback SPROM\n");
 
+	bcm63xx_wlan_register();
+
 	bcm63xx_flash_register();
 
 	bcm63xx_led_data.num_leds = ARRAY_SIZE(board.leds);
--- a/arch/mips/bcm63xx/clk.c
+++ b/arch/mips/bcm63xx/clk.c
@@ -447,6 +447,21 @@ static struct clk clk_nand = {
 };
 
 /*
+ * WLAN clock
+ */
+static void wlan_set(struct clk *clk, int enable)
+{
+	if (BCMCPU_IS_6362())
+		bcm_hwclock_set(CKCTL_6362_WLAN_OCP_EN, enable);
+	else if (BCMCPU_IS_63268())
+		bcm_hwclock_set(CKCTL_63268_WLAN_OCP_EN, enable);
+}
+
+static struct clk clk_wlan = {
+	.set	= wlan_set,
+};
+
+/*
  * Internal peripheral clock
  */
 static struct clk clk_periph = {
@@ -637,6 +652,7 @@ static struct clk_lookup bcm6362_clks[]
 	CLKDEV_INIT(NULL, "hsspi", &clk_hsspi),
 	CLKDEV_INIT(NULL, "pcie", &clk_pcie),
 	CLKDEV_INIT(NULL, "ipsec", &clk_ipsec),
+	CLKDEV_INIT(NULL, "wlan", &clk_wlan),
 };
 
 static struct clk_lookup bcm6368_clks[] = {
@@ -673,6 +689,7 @@ static struct clk_lookup bcm63268_clks[]
 	CLKDEV_INIT(NULL, "spi", &clk_spi),
 	CLKDEV_INIT(NULL, "hsspi", &clk_hsspi),
 	CLKDEV_INIT(NULL, "pcie", &clk_pcie),
+	CLKDEV_INIT(NULL, "wlan", &clk_wlan),
 };
 
 #define HSSPI_PLL_HZ_6318	250000000
--- /dev/null
+++ b/arch/mips/bcm63xx/dev-wlan.c
@@ -0,0 +1,155 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <bcm63xx_cpu.h>
+#include <bcm63xx_io.h>
+#include <bcm63xx_regs.h>
+#include <bcm63xx_reset.h>
+
+#if 0
+0x00    uint32 CcIdA;                               /* CC desc A */
+0x04    uint32 CcIdB;                               /* CC desc B */
+0x08    uint32 CcAddr;                              /* CC base addr */
+0x0c    uint32 MacIdA;                              /* MAC desc A */
+0x10    uint32 MacIdB;                              /* MAC desc B */
+0x14    uint32 MacAddr;                             /* MAC base addr */
+0x18    uint32 ShimIdA;                             /* SHIM desc A */
+0x1c    uint32 ShimIdB;                             /* SHIM desc B */
+0x20    uint32 ShimAddr;                            /* SHIM addr */
+0x24    uint32 ShimEot;                             /* EOT */
+0x28    uint32 CcControl;                           /* CC control */                                                
+0x2c    uint32 CcStatus;                            /* CC status */                                                
+0x30    uint32 MacControl;                          /* MAC control */                                                
+0x34    uint32 MacStatus;                           /* MAC status */    
+0x38    uint32 ShimMisc;                            /* SHIM control registers */
+0x3c    uint32 ShimStatus;                          /* SHIM status */
+#endif
+
+#if 0
+0x00    uint32 ShimMisc;                            /* SHIM control registers */
+0x04    uint32 ShimStatus;                          /* SHIM status */       
+0x08    uint32 CcControl;                           /* CC control */
+0x0c    uint32 CcStatus;                            /* CC status */
+0x10    uint32 MacControl;                          /* MAC control */
+0x14    uint32 MacStatus;                           /* MAC status */
+0x18    uint32 CcIdA;                               /* CC desc A */
+0x1c    uint32 CcIdB;                               /* CC desc B */
+0x20    uint32 CcAddr;                              /* CC base addr */
+0x24    uint32 MacIdA;                              /* MAC desc A */
+0x28    uint32 MacIdB;                              /* MAC desc B */
+0x2c    uint32 MacAddr;                             /* MAC base addr */
+0x30    uint32 ShimIdA;                             /* SHIM desc A */
+0x34    uint32 ShimIdB;                             /* SHIM desc B */
+0x38    uint32 ShimAddr;                            /* SHIM addr */
+0x3c    uint32 ShimEot;                             /* EOT */     
+#endif
+
+#define WLAN_SHIM_MISC			0x00
+#define WLAN_SHIM_MISC_A0		0x38
+#define WLAN_SHIM_FORCE_CLOCKS_ON	BIT(2)
+#define WLAN_SHIM_MACRO_DISABLE		BIT(1)
+#define WLAN_SHIM_MACRO_SOFT_RESET	BIT(0)
+
+#define WLAN_SHIM_STATUS		0x04
+#define WLAN_SHIM_STATUS_A0		0x3c
+
+#define WLAN_CC_CONTROL			0x08
+#define WLAN_CC_CONTROL_A0		0x28
+
+#define WLAN_CC_STATUS			0x0c
+#define WLAN_CC_STATUS_A0		0x2c
+
+#define WLAN_MAC_CONTROL		0x10
+#define WLAN_MAC_CONTROL_A0		0x30
+#define SICF_FGC			BIT(1)
+#define SICF_CLOCK_EN			BIT(0)
+
+#define WLAN_MAC_STATUS			0x14
+#define WLAN_MAC_STATUS_A0		0x34
+
+#define WLAN_CC_ID_A			0x18
+#define WLAN_CC_ID_A_A0			0x00
+
+#define WLAN_CC_ID_B			0x1c
+#define WLAN_CC_ID_B_A0			0x04
+
+#define WLAN_CC_ADDR			0x20
+#define WLAN_CC_ADDR_A0			0x08
+
+#define WLAN_MAC_ID_A			0x24
+#define WLAN_MAC_ID_A_A0		0x0c
+
+#define WLAN_MAC_ID_B			0x28
+#define WLAN_MAC_ID_B_A0		0x10
+
+#define WLAN_MAC_ADDR			0x2c
+#define WLAN_MAC_ADDR_A0		0x14
+
+#define WLAN_SHIM_ID_A			0x30
+#define WLAN_SHIM_ID_A_A0		0x18
+
+#define WLAN_SHIM_ID_B			0x34
+#define WLAN_SHIM_ID_B_A0		0x1c
+
+#define WLAN_SHIM_ADDR			0x38
+#define WLAN_SHIM_ADDR_A0		0x20
+
+#define WLAN_SHIM_EOT			0x3c
+#define WLAN_SHIM_EOT_A0		0x24
+
+int __init bcm63xx_wlan_register(void)
+{
+	struct clk *clk;
+
+	if (!BCMCPU_IS_6362() && !BCMCPU_IS_63268())
+		return 0;
+
+	clk = clk_get(NULL, "wlan");
+	if (IS_ERR_OR_NULL(clk))
+		return -ENODEV;
+
+	clk_prepare_enable(clk);
+
+	mdelay(10);
+	bcm63xx_core_set_reset(BCM63XX_RESET_WLAN_SHIM, 1);
+	bcm63xx_core_set_reset(BCM63XX_RESET_WLAN_UBUS, 1);
+	mdelay(1);
+	bcm63xx_core_set_reset(BCM63XX_RESET_WLAN_SHIM, 0);
+	bcm63xx_core_set_reset(BCM63XX_RESET_WLAN_UBUS, 0);
+	mdelay(1);
+
+	if ((bcm63xx_get_cpu_rev() & 0xff) == 0xa0) {
+		bcm_wlan_shim_writel((WLAN_SHIM_FORCE_CLOCKS_ON |
+				      WLAN_SHIM_MACRO_SOFT_RESET),
+				     WLAN_SHIM_MISC_A0);
+		mdelay(1);
+		bcm_wlan_shim_writel((SICF_FGC | SICF_CLOCK_EN),
+				     WLAN_MAC_CONTROL_A0);
+		bcm_wlan_shim_writel(WLAN_SHIM_FORCE_CLOCKS_ON,
+				     WLAN_SHIM_MISC_A0);
+		bcm_wlan_shim_writel(WLAN_SHIM_FORCE_CLOCKS_ON,
+				     WLAN_SHIM_MISC_A0);
+		bcm_wlan_shim_writel(0, WLAN_SHIM_MISC_A0);
+		bcm_wlan_shim_writel(SICF_CLOCK_EN, WLAN_MAC_CONTROL_A0);
+	} else {
+		bcm_wlan_shim_writel((WLAN_SHIM_FORCE_CLOCKS_ON |
+				      WLAN_SHIM_MACRO_SOFT_RESET),
+				     WLAN_SHIM_MISC);
+		mdelay(1);
+		bcm_wlan_shim_writel((SICF_FGC | SICF_CLOCK_EN),
+				     WLAN_MAC_CONTROL);
+		bcm_wlan_shim_writel(WLAN_SHIM_FORCE_CLOCKS_ON,
+				     WLAN_SHIM_MISC);
+		bcm_wlan_shim_writel(WLAN_SHIM_FORCE_CLOCKS_ON,
+				     WLAN_SHIM_MISC);
+		bcm_wlan_shim_writel(0, WLAN_SHIM_MISC);
+		bcm_wlan_shim_writel(SICF_CLOCK_EN, WLAN_MAC_CONTROL);
+	}
+
+	printk("bcm6362-wlan: registered rev %02x\n", (bcm63xx_get_cpu_rev() & 0xff));
+
+	return 0;
+}
--- a/arch/mips/bcm63xx/Makefile
+++ b/arch/mips/bcm63xx/Makefile
@@ -1,7 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0
 obj-y		+= clk.o cpu.o cs.o gpio.o irq.o nvram.o prom.o reset.o \
 		   setup.o timer.o dev-enet.o dev-flash.o dev-pcmcia.o \
-		   dev-rng.o dev-wdt.o \
+		   dev-rng.o dev-wdt.o dev-wlan.o \
 		   dev-usb-ehci.o dev-usb-ohci.o dev-usb-usbd.o usb-common.o \
 		   pci-ath9k-fixup.o pci-rt2x00-fixup.o sprom.o
 obj-$(CONFIG_EARLY_PRINTK)	+= early_printk.o
--- a/arch/mips/bcm63xx/reset.c
+++ b/arch/mips/bcm63xx/reset.c
@@ -31,7 +31,9 @@
 	[BCM63XX_RESET_PCIE]		= BCM## __cpu ##_RESET_PCIE,	\
 	[BCM63XX_RESET_PCIE_EXT]	= BCM## __cpu ##_RESET_PCIE_EXT, \
 	[BCM63XX_RESET_PCIE_CORE]	= BCM## __cpu ##_RESET_PCIE_CORE, \
-	[BCM63XX_RESET_PCIE_HARD]	= BCM## __cpu ##_RESET_PCIE_HARD,
+	[BCM63XX_RESET_PCIE_HARD]	= BCM## __cpu ##_RESET_PCIE_HARD, \
+	[BCM63XX_RESET_WLAN_SHIM]	= BCM## __cpu ##_RESET_WLAN_SHIM, \
+	[BCM63XX_RESET_WLAN_UBUS]	= BCM## __cpu ##_RESET_WLAN_UBUS,
 
 #define BCM3368_RESET_SPI	SOFTRESET_3368_SPI_MASK
 #define BCM3368_RESET_ENET	SOFTRESET_3368_ENET_MASK
@@ -47,7 +49,8 @@
 #define BCM3368_RESET_PCIE_EXT	0
 #define BCM3368_RESET_PCIE_CORE	0
 #define BCM3368_RESET_PCIE_HARD	0
-
+#define BCM3368_RESET_WLAN_SHIM	0
+#define BCM3368_RESET_WLAN_UBUS	0
 
 #define BCM6318_RESET_SPI	SOFTRESET_6318_SPI_MASK
 #define BCM6318_RESET_ENET	0
@@ -63,6 +66,8 @@
 #define BCM6318_RESET_PCIE_EXT	SOFTRESET_6318_PCIE_EXT_MASK
 #define BCM6318_RESET_PCIE_CORE	SOFTRESET_6318_PCIE_CORE_MASK
 #define BCM6318_RESET_PCIE_HARD	SOFTRESET_6318_PCIE_HARD_MASK
+#define BCM6318_RESET_WLAN_SHIM	0
+#define BCM6318_RESET_WLAN_UBUS	0
 
 #define BCM6328_RESET_SPI	SOFTRESET_6328_SPI_MASK
 #define BCM6328_RESET_ENET	0
@@ -78,6 +83,8 @@
 #define BCM6328_RESET_PCIE_EXT	SOFTRESET_6328_PCIE_EXT_MASK
 #define BCM6328_RESET_PCIE_CORE	SOFTRESET_6328_PCIE_CORE_MASK
 #define BCM6328_RESET_PCIE_HARD	SOFTRESET_6328_PCIE_HARD_MASK
+#define BCM6328_RESET_WLAN_SHIM	0
+#define BCM6328_RESET_WLAN_UBUS	0
 
 #define BCM6338_RESET_SPI	SOFTRESET_6338_SPI_MASK
 #define BCM6338_RESET_ENET	SOFTRESET_6338_ENET_MASK
@@ -93,6 +100,8 @@
 #define BCM6338_RESET_PCIE_EXT	0
 #define BCM6338_RESET_PCIE_CORE	0
 #define BCM6338_RESET_PCIE_HARD	0
+#define BCM6338_RESET_WLAN_SHIM	0
+#define BCM6338_RESET_WLAN_UBUS	0
 
 #define BCM6348_RESET_SPI	SOFTRESET_6348_SPI_MASK
 #define BCM6348_RESET_ENET	SOFTRESET_6348_ENET_MASK
@@ -108,6 +117,8 @@
 #define BCM6348_RESET_PCIE_EXT	0
 #define BCM6348_RESET_PCIE_CORE	0
 #define BCM6348_RESET_PCIE_HARD	0
+#define BCM6348_RESET_WLAN_SHIM	0
+#define BCM6348_RESET_WLAN_UBUS	0
 
 #define BCM6358_RESET_SPI	SOFTRESET_6358_SPI_MASK
 #define BCM6358_RESET_ENET	SOFTRESET_6358_ENET_MASK
@@ -123,6 +134,8 @@
 #define BCM6358_RESET_PCIE_EXT	0
 #define BCM6358_RESET_PCIE_CORE	0
 #define BCM6358_RESET_PCIE_HARD	0
+#define BCM6358_RESET_WLAN_SHIM	0
+#define BCM6358_RESET_WLAN_UBUS	0
 
 #define BCM6362_RESET_SPI	SOFTRESET_6362_SPI_MASK
 #define BCM6362_RESET_ENET	0
@@ -138,6 +151,8 @@
 #define BCM6362_RESET_PCIE_EXT	SOFTRESET_6362_PCIE_EXT_MASK
 #define BCM6362_RESET_PCIE_CORE	SOFTRESET_6362_PCIE_CORE_MASK
 #define BCM6362_RESET_PCIE_HARD	0
+#define BCM6362_RESET_WLAN_SHIM	SOFTRESET_6362_WLAN_SHIM_MASK
+#define BCM6362_RESET_WLAN_UBUS	SOFTRESET_6362_WLAN_UBUS_MASK
 
 #define BCM6368_RESET_SPI	SOFTRESET_6368_SPI_MASK
 #define BCM6368_RESET_ENET	0
@@ -153,6 +168,8 @@
 #define BCM6368_RESET_PCIE_EXT	0
 #define BCM6368_RESET_PCIE_CORE	0
 #define BCM6368_RESET_PCIE_HARD	0
+#define BCM6368_RESET_WLAN_SHIM	0
+#define BCM6368_RESET_WLAN_UBUS	0
 
 #define BCM63268_RESET_SPI	SOFTRESET_63268_SPI_MASK
 #define BCM63268_RESET_ENET	0
@@ -168,6 +185,8 @@
 #define BCM63268_RESET_PCIE_EXT	SOFTRESET_63268_PCIE_EXT_MASK
 #define BCM63268_RESET_PCIE_CORE	SOFTRESET_63268_PCIE_CORE_MASK
 #define BCM63268_RESET_PCIE_HARD	SOFTRESET_63268_PCIE_HARD_MASK
+#define BCM63268_RESET_WLAN_SHIM	SOFTRESET_63268_WLAN_SHIM_MASK
+#define BCM63268_RESET_WLAN_UBUS	SOFTRESET_63268_WLAN_UBUS_MASK
 
 /*
  * core reset bits
--- a/arch/mips/include/asm/mach-bcm63xx/bcm63xx_cpu.h
+++ b/arch/mips/include/asm/mach-bcm63xx/bcm63xx_cpu.h
@@ -185,7 +185,8 @@ enum bcm63xx_regs_set {
 	RSET_PCMDMAS,
 	RSET_RNG,
 	RSET_MISC,
-	RSET_NAND
+	RSET_NAND,
+	RSET_WLAN_SHIM
 };
 
 #define RSET_DSL_LMEM_SIZE		(64 * 1024 * 4)
@@ -264,6 +265,7 @@ enum bcm63xx_regs_set {
 #define BCM_3368_RNG_BASE		(0xdeadbeef)
 #define BCM_3368_MISC_BASE		(0xdeadbeef)
 #define BCM_3368_NAND_BASE		(0xdeadbeef)
+#define BCM_3368_WLAN_SHIM_BASE		(0xdeadbeef)
 
 /*
  * 6318 register sets base address
@@ -312,6 +314,7 @@ enum bcm63xx_regs_set {
 #define BCM_6318_RNG_BASE		(0xdeadbeef)
 #define BCM_6318_MISC_BASE		(0xb0000280)
 #define BCM_6318_NAND_BASE		(0xdeadbeef)
+#define BCM_6318_WLAN_SHIM_BASE		(0xdeadbeef)
 #define BCM_6318_OTP_BASE		(0xdeadbeef)
 
 #define BCM_6318_STRAP_BASE		(0xb0000900)
@@ -363,6 +366,7 @@ enum bcm63xx_regs_set {
 #define BCM_6328_RNG_BASE		(0xdeadbeef)
 #define BCM_6328_MISC_BASE		(0xb0001800)
 #define BCM_6328_NAND_BASE		(0xb0000200)
+#define BCM_6328_WLAN_SHIM_BASE		(0xdeadbeef)
 #define BCM_6328_OTP_BASE		(0xb0000600)
 
 /*
@@ -413,6 +417,7 @@ enum bcm63xx_regs_set {
 #define BCM_6338_RNG_BASE		(0xdeadbeef)
 #define BCM_6338_MISC_BASE		(0xdeadbeef)
 #define BCM_6338_NAND_BASE		(0xdeadbeef)
+#define BCM_6338_WLAN_SHIM_BASE		(0xdeadbeef)
 
 /*
  * 6345 register sets base address
@@ -462,6 +467,7 @@ enum bcm63xx_regs_set {
 #define BCM_6345_RNG_BASE		(0xdeadbeef)
 #define BCM_6345_MISC_BASE		(0xdeadbeef)
 #define BCM_6345_NAND_BASE		(0xdeadbeef)
+#define BCM_6345_WLAN_SHIM_BASE		(0xdeadbeef)
 
 /*
  * 6348 register sets base address
@@ -509,6 +515,7 @@ enum bcm63xx_regs_set {
 #define BCM_6348_RNG_BASE		(0xdeadbeef)
 #define BCM_6348_MISC_BASE		(0xdeadbeef)
 #define BCM_6348_NAND_BASE		(0xdeadbeef)
+#define BCM_6348_WLAN_SHIM_BASE		(0xdeadbeef)
 
 /*
  * 6358 register sets base address
@@ -556,6 +563,7 @@ enum bcm63xx_regs_set {
 #define BCM_6358_RNG_BASE		(0xdeadbeef)
 #define BCM_6358_MISC_BASE		(0xdeadbeef)
 #define BCM_6358_NAND_BASE		(0xdeadbeef)
+#define BCM_6358_WLAN_SHIM_BASE		(0xdeadbeef)
 
 /*
  * 6362 register sets base address
@@ -660,6 +668,7 @@ enum bcm63xx_regs_set {
 #define BCM_6368_RNG_BASE		(0xb0004180)
 #define BCM_6368_MISC_BASE		(0xdeadbeef)
 #define BCM_6368_NAND_BASE		(0xb0000200)
+#define BCM_6368_WLAN_SHIM_BASE		(0xdeadbeef)
 
 /*
  * 63268 register sets base address
@@ -708,6 +717,7 @@ enum bcm63xx_regs_set {
 #define BCM_63268_RNG_BASE		(0xdeadbeef)
 #define BCM_63268_MISC_BASE		(0xb0001800)
 #define BCM_63268_NAND_BASE		(0xb0000200)
+#define BCM_63268_WLAN_SHIM_BASE	(0xb0007000)
 
 extern const unsigned long *bcm63xx_regs_base;
 
@@ -754,6 +764,7 @@ extern const unsigned long *bcm63xx_regs
 	[RSET_RNG]		= BCM_## __cpu ##_RNG_BASE,		\
 	[RSET_MISC]		= BCM_## __cpu ##_MISC_BASE,		\
 	[RSET_NAND]		= BCM_## __cpu ##_NAND_BASE,		\
+	[RSET_WLAN_SHIM]	= BCM_## __cpu ##_WLAN_SHIM_BASE,	\
 
 
 static inline unsigned long bcm63xx_regset_address(enum bcm63xx_regs_set set)
@@ -800,6 +811,7 @@ enum bcm63xx_irq {
 	IRQ_ENETSW_TXDMA3,
 	IRQ_XTM,
 	IRQ_XTM_DMA0,
+	IRQ_WLAN,
 };
 
 /*
@@ -841,6 +853,7 @@ enum bcm63xx_irq {
 #define BCM_3368_ENETSW_TXDMA3_IRQ	0
 #define BCM_3368_XTM_IRQ		0
 #define BCM_3368_XTM_DMA0_IRQ		0
+#define BCM_3368_WLAN_IRQ		0
 
 #define BCM_3368_EXT_IRQ0		(IRQ_INTERNAL_BASE + 25)
 #define BCM_3368_EXT_IRQ1		(IRQ_INTERNAL_BASE + 26)
@@ -889,6 +902,7 @@ enum bcm63xx_irq {
 #define BCM_6318_ENETSW_TXDMA3_IRQ	(BCM_6318_VERY_HIGH_IRQ_BASE + 13)
 #define BCM_6318_XTM_IRQ		(BCM_6318_HIGH_IRQ_BASE + 31)
 #define BCM_6318_XTM_DMA0_IRQ		(BCM_6318_HIGH_IRQ_BASE + 11)
+#define BCM_6318_WLAN_IRQ		0
 
 #define BCM_6318_PCM_DMA0_IRQ		(IRQ_INTERNAL_BASE + 2)
 #define BCM_6318_PCM_DMA1_IRQ		(IRQ_INTERNAL_BASE + 3)
@@ -938,6 +952,7 @@ enum bcm63xx_irq {
 #define BCM_6328_ENETSW_TXDMA3_IRQ	0
 #define BCM_6328_XTM_IRQ		(BCM_6328_HIGH_IRQ_BASE + 31)
 #define BCM_6328_XTM_DMA0_IRQ		(BCM_6328_HIGH_IRQ_BASE + 11)
+#define BCM_6328_WLAN_IRQ		0
 
 #define BCM_6328_PCM_DMA0_IRQ		(IRQ_INTERNAL_BASE + 2)
 #define BCM_6328_PCM_DMA1_IRQ		(IRQ_INTERNAL_BASE + 3)
@@ -984,6 +999,7 @@ enum bcm63xx_irq {
 #define BCM_6338_ENETSW_TXDMA3_IRQ	0
 #define BCM_6338_XTM_IRQ		0
 #define BCM_6338_XTM_DMA0_IRQ		0
+#define BCM_6338_WLAN_IRQ		0
 
 /*
  * 6345 irqs
@@ -1023,6 +1039,7 @@ enum bcm63xx_irq {
 #define BCM_6345_ENETSW_TXDMA3_IRQ	0
 #define BCM_6345_XTM_IRQ		0
 #define BCM_6345_XTM_DMA0_IRQ		0
+#define BCM_6345_WLAN_IRQ		0
 
 /*
  * 6348 irqs
@@ -1062,6 +1079,7 @@ enum bcm63xx_irq {
 #define BCM_6348_ENETSW_TXDMA3_IRQ	0
 #define BCM_6348_XTM_IRQ		0
 #define BCM_6348_XTM_DMA0_IRQ		0
+#define BCM_6348_WLAN_IRQ		0
 
 /*
  * 6358 irqs
@@ -1101,6 +1119,7 @@ enum bcm63xx_irq {
 #define BCM_6358_ENETSW_TXDMA3_IRQ	0
 #define BCM_6358_XTM_IRQ		0
 #define BCM_6358_XTM_DMA0_IRQ		0
+#define BCM_6358_WLAN_IRQ		0
 
 #define BCM_6358_PCM_DMA0_IRQ		(IRQ_INTERNAL_BASE + 23)
 #define BCM_6358_PCM_DMA1_IRQ		(IRQ_INTERNAL_BASE + 24)
@@ -1216,6 +1235,7 @@ enum bcm63xx_irq {
 #define BCM_6368_ENETSW_TXDMA3_IRQ	(BCM_6368_HIGH_IRQ_BASE + 7)
 #define BCM_6368_XTM_IRQ		(IRQ_INTERNAL_BASE + 11)
 #define BCM_6368_XTM_DMA0_IRQ		(BCM_6368_HIGH_IRQ_BASE + 8)
+#define BCM_6368_WLAN_IRQ		0
 
 #define BCM_6368_PCM_DMA0_IRQ		(BCM_6368_HIGH_IRQ_BASE + 30)
 #define BCM_6368_PCM_DMA1_IRQ		(BCM_6368_HIGH_IRQ_BASE + 31)
@@ -1331,6 +1351,7 @@ extern const int *bcm63xx_irqs;
 	[IRQ_ENETSW_TXDMA3]	= BCM_## __cpu ##_ENETSW_TXDMA3_IRQ,	\
 	[IRQ_XTM]		= BCM_## __cpu ##_XTM_IRQ,		\
 	[IRQ_XTM_DMA0]		= BCM_## __cpu ##_XTM_DMA0_IRQ,		\
+	[IRQ_WLAN]		= BCM_## __cpu ##_WLAN_IRQ,		\
 
 static inline int bcm63xx_get_irq_number(enum bcm63xx_irq irq)
 {
--- /dev/null
+++ b/arch/mips/include/asm/mach-bcm63xx/bcm63xx_dev_wlan.h
@@ -0,0 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __BCM63XX_WLAN_H
+#define __BCM63XX_WLAN_H
+
+int __init bcm63xx_wlan_register(void);
+
+#endif /* __BCM63XX_WLAN_H */
--- a/arch/mips/include/asm/mach-bcm63xx/bcm63xx_io.h
+++ b/arch/mips/include/asm/mach-bcm63xx/bcm63xx_io.h
@@ -113,5 +113,7 @@
 #define bcm_misc_writel(v, o)	bcm_rset_writel(RSET_MISC, (v), (o))
 #define bcm_nand_readl(o)	bcm_rset_readl(RSET_NAND, (o))
 #define bcm_nand_writel(v, o)	bcm_rset_writel(RSET_NAND, (v), (o))
+#define bcm_wlan_shim_readl(o)		bcm_rset_readl(RSET_WLAN_SHIM, (o))
+#define bcm_wlan_shim_writel(v, o)	bcm_rset_writel(RSET_WLAN_SHIM, (v), (o))
 
 #endif /* ! BCM63XX_IO_H_ */
--- a/arch/mips/include/asm/mach-bcm63xx/bcm63xx_reset.h
+++ b/arch/mips/include/asm/mach-bcm63xx/bcm63xx_reset.h
@@ -17,6 +17,8 @@ enum bcm63xx_core_reset {
 	BCM63XX_RESET_PCIE_EXT,
 	BCM63XX_RESET_PCIE_CORE,
 	BCM63XX_RESET_PCIE_HARD,
+	BCM63XX_RESET_WLAN_SHIM,
+	BCM63XX_RESET_WLAN_UBUS,
 };
 
 void bcm63xx_core_set_reset(enum bcm63xx_core_reset, int reset);
--- a/arch/mips/pci/fixup-bcm63xx.c
+++ b/arch/mips/pci/fixup-bcm63xx.c
@@ -10,9 +10,28 @@
 #include <linux/pci.h>
 #include <bcm63xx_cpu.h>
 
+#include "pci-bcm63xx.h"
+
+static void bcm6362_pci_fixup(struct pci_dev *dev)
+{
+	switch (PCI_SLOT(dev->devfn)) {
+	case WLAN_OCP_DEV_SLOT:
+		if (((dev->device << 16) | dev->vendor) == WLAN_OCP_PCI_ID) {
+			dev->resource[0].start = BCM_6362_WLAN_CHIPCOMMON_BASE;
+			dev->resource[0].end = BCM_6362_WLAN_CHIPCOMMON_BASE + WLAN_OCP_RES_SIZE - 1;
+		}
+		break;
+	}
+}
+DECLARE_PCI_FIXUP_FINAL(PCI_ANY_ID, PCI_ANY_ID, bcm6362_pci_fixup);
+
 int pcibios_map_irq(const struct pci_dev *dev, u8 slot, u8 pin)
 {
-	return bcm63xx_get_irq_number(IRQ_PCI);
+	if ((dev->bus->number == PCIE_BUS_DEVICE) &&
+	    ((dev->class >> 8) != PCI_CLASS_BRIDGE_PCI))
+		return bcm63xx_get_irq_number(IRQ_PCI);
+
+	return bcm63xx_get_irq_number(IRQ_WLAN);
 }
 
 int pcibios_plat_dev_init(struct pci_dev *dev)
--- a/arch/mips/pci/ops-bcm63xx.c
+++ b/arch/mips/pci/ops-bcm63xx.c
@@ -58,6 +58,82 @@ static int preprocess_write(u32 orig_dat
 	return ret;
 }
 
+u32 bcm6362_wlan_soft_config_space[WLAN_OCP_DEV_NUM][WLAN_OCP_PCI_HDR_DW_LEN] = {
+	{
+		WLAN_OCP_PCI_ID, 0x00100006, 0x02800000, 0x00000010,
+		BCM_6362_WLAN_CHIPCOMMON_BASE, 0x00000000, 0x00000000, 0x00000000,
+		0x00000000, 0x00000000, 0x00000000, 0x051314e4,
+		0x00000000, 0x00000040, 0x00000000, 0x0000010f,
+		0xce035801, 0x00004008, 0x0080d005, 0x00000000,
+		0x00000000, 0x00000000, 0x00784809, 0x00000010,
+		0x00000000, 0x00000000, 0x00000000, 0x00000000,
+		0x00000000, 0x00000000, 0x00000000, 0x00000000,
+		0x18001000, 0x00000000, 0xffffffff, 0x00000003,
+		0x00000000, 0x00000100, 0x00000000, 0x00000000,
+		0x00000000, 0x00000000, 0x00010000, 0x18101000,
+		0x00000000, 0x00000000, 0x00000000, 0x00000000,
+		0x00000000, 0x00000000, 0x00000000, 0x00000000,
+		0x00010010, 0x00288fa0, 0x00190100, 0x00176c11,
+		0x30110040, 0x00000000, 0x00000000, 0x00000000,
+		0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	},
+};
+
+static int bcm6362_wlan_pci_read(struct pci_bus *bus, unsigned int devfn,
+				 int where, int size, u32 *val)
+{
+	u32 data;
+
+	if (PCI_SLOT(devfn) != WLAN_OCP_DEV_SLOT)
+		return PCIBIOS_SUCCESSFUL;
+
+	if (where >= 256)
+		data = 0xffffffff;
+	else
+		data = bcm6362_wlan_soft_config_space[PCI_SLOT(devfn) - WLAN_OCP_DEV_SLOT][where / 4];
+
+	*val = postprocess_read(data, where, size);
+
+	switch (size) {
+	case 4:
+		/* Special case for reading PCI device range */
+		if ((where >= PCI_BASE_ADDRESS_0) && (where <= PCI_BASE_ADDRESS_5)) {
+			if (data == 0xffffffff) {
+				if (where == PCI_BASE_ADDRESS_0)
+					*val = 0xFFFF0000;
+				else
+					*val = 0;
+			}
+		}
+		break;
+	}
+
+	return PCIBIOS_SUCCESSFUL;
+}
+
+static int bcm6362_wlan_pci_write(struct pci_bus *bus, unsigned int devfn,
+				  int where, int size, u32 val)
+{
+	u32 data;
+
+	if (PCI_SLOT(devfn) != WLAN_OCP_DEV_SLOT)
+		return PCIBIOS_SUCCESSFUL;
+
+	if (where >= 256)
+		return PCIBIOS_BAD_REGISTER_NUMBER;
+
+	data = bcm6362_wlan_soft_config_space[PCI_SLOT(devfn) - WLAN_OCP_DEV_SLOT][where / 4];
+	data = preprocess_write(data, val, where, size);
+	bcm6362_wlan_soft_config_space[PCI_SLOT(devfn) - WLAN_OCP_DEV_SLOT][where / 4] = data;
+
+	return PCIBIOS_SUCCESSFUL;
+}
+
+struct pci_ops bcm6362_wlan_pci_ops = {
+	.read = bcm6362_wlan_pci_read,
+	.write = bcm6362_wlan_pci_write
+};
+
 /*
  * setup hardware for a configuration cycle with given parameters
  */
@@ -486,6 +562,11 @@ static int bcm63xx_pcie_read(struct pci_
 	u32 data;
 	u32 reg = where & ~3;
 
+	if ((size == 2) && (where & 1))
+		return PCIBIOS_BAD_REGISTER_NUMBER;
+	else if ((size == 4) && (where & 3))
+		return PCIBIOS_BAD_REGISTER_NUMBER;
+
 	if (!bcm63xx_pcie_can_access(bus, devfn))
 		return PCIBIOS_DEVICE_NOT_FOUND;
 
@@ -510,6 +591,11 @@ static int bcm63xx_pcie_write(struct pci
 	u32 data;
 	u32 reg = where & ~3;
 
+	if ((size == 2) && (where & 1))
+		return PCIBIOS_BAD_REGISTER_NUMBER;
+	else if ((size == 4) && (where & 3))
+		return PCIBIOS_BAD_REGISTER_NUMBER;
+
 	if (!bcm63xx_pcie_can_access(bus, devfn))
 		return PCIBIOS_DEVICE_NOT_FOUND;
 
@@ -520,7 +606,6 @@ static int bcm63xx_pcie_write(struct pci
 			reg += PCIE_DEVICE_OFFSET_6328;
 	}
 
-
 	data = bcm_pcie_readl(reg);
 
 	data = preprocess_write(data, val, where, size);
--- a/arch/mips/pci/pci-bcm63xx.c
+++ b/arch/mips/pci/pci-bcm63xx.c
@@ -18,6 +18,26 @@
 
 #include "pci-bcm63xx.h"
 
+#define BCM6362_PCIE_MEM2_BASE		0xa0000000
+#define BCM6362_PCIE_MEM2_SIZE		(0x01000000-0x100000)
+
+#define BCM6362_PCI_MEM_BASE		(BCM6362_PCIE_MEM2_BASE + BCM6362_PCIE_MEM2_SIZE)
+#define BCM6362_PCI_MEM_SIZE		0x00100000
+
+#define BCM6362_CB_MEM_BASE		(BCM6362_PCI_MEM_BASE + BCM6362_PCI_MEM_SIZE)
+#define BCM6362_CB_MEM_SIZE		0x01000000
+
+#define BCM6362_PCI_IO_BASE		(BCM6362_CB_MEM_BASE + BCM6362_CB_MEM_SIZE)
+#define BCM6362_PCI_IO_SIZE		0x00010000
+
+#define BCM6362_PCI_IO_BASE_PA		BCM6362_PCI_IO_BASE
+#define BCM6362_PCI_IO_END_PA		(BCM6362_PCI_IO_BASE_PA + \
+					 BCM6362_PCI_IO_SIZE - 1)
+
+#define BCM6362_PCI_MEM_BASE_PA		BCM6362_PCI_MEM_BASE
+#define BCM6362_PCI_MEM_END_PA		(BCM6362_PCI_MEM_BASE_PA + \
+					 BCM6362_PCI_MEM_SIZE - 1)
+
 /*
  * Allow PCI to be disabled at runtime depending on board nvram
  * configuration
@@ -75,6 +95,26 @@ struct pci_controller bcm63xx_cb_control
 };
 #endif
 
+static struct resource bcm6362_wlan_pci_io_resource = {
+	.name = "bcm6362 WLAN PCI IO space",
+	.start = BCM6362_PCI_IO_BASE_PA,
+	.end = BCM6362_PCI_IO_END_PA,
+	.flags = IORESOURCE_IO
+};
+
+static struct resource bcm6362_wlan_pci_mem_resource = {
+	.name = "bcm6362 WLAN PCI memory space",
+	.start = BCM6362_PCI_MEM_BASE_PA,
+	.end = BCM6362_PCI_MEM_END_PA,
+	.flags = IORESOURCE_MEM
+};
+
+struct pci_controller bcm6362_wlan_pci_controller = {
+	.pci_ops = &bcm6362_wlan_pci_ops,
+	.io_resource = &bcm6362_wlan_pci_io_resource,
+	.mem_resource = &bcm6362_wlan_pci_mem_resource,
+};
+
 static struct resource bcm_pcie_mem_resource = {
 	.name	= "bcm63xx PCIe memory space",
 	.start	= 0,
@@ -179,6 +219,14 @@ static void __init bcm63xx_init_pcie_gen
 {
 	u32 val;
 
+	/* Register WLAN OCP controller */
+	if (BCMCPU_IS_6362() || BCMCPU_IS_63268()) {
+//		ioport_resource.start = BCM6362_PCI_IO_BASE_PA;
+//		ioport_resource.end = BCM6362_PCI_IO_END_PA;
+
+		register_pci_controller(&bcm6362_wlan_pci_controller);
+	}
+
 	/* configure the PCIe bridge */
 	val = bcm_pcie_readl(PCIE_BRIDGE_OPT1_REG);
 	val |= OPT1_RD_BE_OPT_EN;
--- a/arch/mips/pci/pci-bcm63xx.h
+++ b/arch/mips/pci/pci-bcm63xx.h
@@ -15,12 +15,20 @@
 #define CARDBUS_PCI_IDSEL	0x8
 
 
-#define PCIE_BUS_BRIDGE		0
-#define PCIE_BUS_DEVICE		1
+#define PCIE_BUS_BRIDGE		1
+#define PCIE_BUS_DEVICE		2
+
+
+#define WLAN_OCP_DEV_NUM	1
+#define WLAN_OCP_DEV_SLOT	0
+#define WLAN_OCP_PCI_HDR_DW_LEN	64
+#define WLAN_OCP_PCI_ID		0x435f14e4
+#define WLAN_OCP_RES_SIZE	0x2000
 
 /*
  * defined in ops-bcm63xx.c
  */
+extern struct pci_ops bcm6362_wlan_pci_ops;
 extern struct pci_ops bcm63xx_pci_ops;
 extern struct pci_ops bcm63xx_cb_ops;
 extern struct pci_ops bcm63xx_pcie_ops;
--- a/drivers/bcma/host_pci.c
+++ b/drivers/bcma/host_pci.c
@@ -305,6 +305,7 @@ static const struct pci_device_id bcma_p
 	{ PCI_DEVICE(PCI_VENDOR_ID_BROADCOM, 0x4727) },
 	{ PCI_DEVICE(PCI_VENDOR_ID_BROADCOM, 43227) },	/* 0xa8db, BCM43217 (sic!) */
 	{ PCI_DEVICE(PCI_VENDOR_ID_BROADCOM, 43228) },	/* 0xa8dc */
+	{ PCI_DEVICE(PCI_VENDOR_ID_BROADCOM, 0x435f) }, /* BCM6362 */
 	{ 0, },
 };
 MODULE_DEVICE_TABLE(pci, bcma_pci_bridge_tbl);
